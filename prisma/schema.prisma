generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URI")
}

enum Role {
  USER
  TECHNICIAN
  ADMIN
}

enum Status {
  OPEN
  ASSIGNED
  IN_PROGRESS
  CLOSED
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  message String
  isRead Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  subject String
  message String
  rating Int
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model ChatMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  ticketId String @db.ObjectId
  ticket Ticket @relation(fields: [ticketId], references: [id])
  senderId String @db.ObjectId
  sender User @relation("SentMessages", fields: [senderId], references: [id])
  message String
  createdAt DateTime @default(now())

  @@index([ticketId])
  @@index([senderId])
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String @unique
  password String?  // nullable for OAuth
  role Role
  phone String?
  bio String?
  avatar String?
  department String?
  location String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdTickets Ticket[] @relation("CreatedTickets")
  assignedTickets Ticket[] @relation("AssignedTickets")
  notifications Notification[]
  feedback Feedback[]
  sentMessages ChatMessage[] @relation("SentMessages")
  googleId  String?  @unique
  verified  Boolean  @default(false)
}

model Ticket {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  imageUrls String[]
  status Status @default(OPEN)
  location String?
  latitude Float?
  longitude Float?
  createdById String @map("createdBy") @db.ObjectId
  createdBy User @relation("CreatedTickets", fields: [createdById], references: [id])
  assignedToId String? @map("assignedTo") @db.ObjectId
  assignedTo User? @relation("AssignedTickets", fields: [assignedToId], references: [id])
  createdAt DateTime @default(now())
  resolvedAt DateTime?
  chatMessages ChatMessage[]
}
